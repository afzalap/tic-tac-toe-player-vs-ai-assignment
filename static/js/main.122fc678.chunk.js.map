{"version":3,"sources":["componenets/Icon.js","App.js","reportWebVitals.js","index.js"],"names":["Icon","name","className","itemArray","Array","fill","App","useState","isCross","setIsCross","winMsg","setWinMsg","checkIsWinner","includes","checkIsWinnerCopy","changeUser","itemNumber","toast","type","changeComp","move","compMove","possibleMoves","i","length","push","xo","copy","cornersOpen","corners","Math","floor","random","edgesOpen","edges","Container","position","Row","Col","md","Button","color","block","onClick","map","item","index","Card","console","log","change","CardBody","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.122fc678.chunk.js","sourcesContent":["import React from 'react'\r\nimport { FaTimes, FaPen, FaRegCircle } from \"react-icons/fa\";\r\n\r\n\r\nconst Icon = ({ name }) => {\r\n    switch (name) {\r\n        case 'circle':\r\n            return <FaRegCircle className=\"icons\"/>\r\n        case 'cross':\r\n            return <FaTimes className=\"icons\"/>\r\n        default:\r\n            return <FaPen className=\"icons\"/>\r\n    }\r\n}\r\n\r\nexport default Icon;","import React, { useState } from 'react';\nimport Icon from './componenets/Icon';\n\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { Card, CardBody, Container, Button, Col, Row } from 'reactstrap'\nimport 'bootstrap/dist/css/bootstrap.css';\nimport './App.css';\n\nconst itemArray = new Array(9).fill('empty')\n\nconst App = () => {\n\n  const [isCross, setIsCross] = useState(false)\n  const [winMsg, setWinMsg] = useState(\"\")\n\n  const reloadGame = () => {\n    setIsCross(false);\n    setWinMsg(\"\");\n    itemArray.fill(\"empty\")\n  }\n\n  const checkIsWinner = (itemArray) => {\n    if (itemArray[0] === itemArray[1] && itemArray[0] === itemArray[2] && itemArray[0] !== \"empty\")\n      setWinMsg(`${itemArray[0]} won`)\n    if (itemArray[3] === itemArray[4] && itemArray[3] === itemArray[5] && itemArray[3] !== \"empty\")\n      setWinMsg(`${itemArray[3]} won`)\n    if (itemArray[6] === itemArray[7] && itemArray[6] === itemArray[8] && itemArray[6] !== \"empty\")\n      setWinMsg(`${itemArray[6]} won`)\n    if (itemArray[0] === itemArray[3] && itemArray[0] === itemArray[6] && itemArray[0] !== \"empty\")\n      setWinMsg(`${itemArray[0]} won`)\n    if (itemArray[1] === itemArray[4] && itemArray[1] === itemArray[7] && itemArray[1] !== \"empty\")\n      setWinMsg(`${itemArray[1]} won`)\n    if (itemArray[2] === itemArray[5] && itemArray[2] === itemArray[8] && itemArray[2] !== \"empty\")\n      setWinMsg(`${itemArray[2]} won`)\n    if (itemArray[0] === itemArray[4] && itemArray[0] === itemArray[8] && itemArray[0] !== \"empty\")\n      setWinMsg(`${itemArray[0]} won`)\n    if (itemArray[2] === itemArray[4] && itemArray[2] === itemArray[6] && itemArray[2] !== \"empty\")\n      setWinMsg(`${itemArray[2]} won`)\n    if (!itemArray.includes(\"empty\")) {\n      setWinMsg(`Tie Game !`)\n    }\n  }\n\n  const checkIsWinnerCopy = (itemArray) => {\n    if (itemArray[0] === itemArray[1] && itemArray[0] === itemArray[2] && itemArray[0] !== \"empty\")\n      return true;\n    if (itemArray[3] === itemArray[4] && itemArray[3] === itemArray[5] && itemArray[3] !== \"empty\")\n      return true;\n    if (itemArray[6] === itemArray[7] && itemArray[6] === itemArray[8] && itemArray[6] !== \"empty\")\n      return true;\n    if (itemArray[0] === itemArray[3] && itemArray[0] === itemArray[6] && itemArray[0] !== \"empty\")\n      return true;\n    if (itemArray[1] === itemArray[4] && itemArray[1] === itemArray[7] && itemArray[1] !== \"empty\")\n      return true;\n    if (itemArray[2] === itemArray[5] && itemArray[2] === itemArray[8] && itemArray[2] !== \"empty\")\n      return true;\n    if (itemArray[0] === itemArray[4] && itemArray[0] === itemArray[8] && itemArray[0] !== \"empty\")\n      return true;\n    if (itemArray[2] === itemArray[4] && itemArray[2] === itemArray[6] && itemArray[2] !== \"empty\")\n      return true;\n    else\n      return false;\n  }\n\n  const change = itemNumber => {\n\n    changeUser(itemNumber);\n\n    let move = compMove();\n    console.log(move);\n\n    changeComp(move);\n    // setTimeout( function() { changeComp(move); }, 10000);\n    console.log(itemArray);\n  }\n\n  const changeUser = itemNumber => {\n    if (winMsg) {\n      return toast(winMsg, { type: 'success' });\n    }\n\n    if (itemArray[itemNumber] === \"empty\") {\n      itemArray[itemNumber] = \"circle\"\n      setIsCross(!isCross)\n    } else {\n      return toast(\"already filled\", { type: \"error\" })\n    }\n    checkIsWinner(itemArray)\n\n  }\n  \n\n  const changeComp = move => {\n    if (winMsg) {\n      return toast(winMsg, { type: 'success' });\n    }\n\n    if (itemArray[move] === \"empty\") {\n      itemArray[move] =  \"cross\" \n      setIsCross(!isCross)\n    } else {\n      return toast(\"already filled\", { type: \"error\" })\n    }\n    checkIsWinner(itemArray)\n  }\n\n  const compMove = () => {\n    let possibleMoves = [];\n    let move;\n    \n    for (let i = 0; i < itemArray.length; i++){\n      if (itemArray[i] === \"empty\") {\n        possibleMoves.push(i);\n      }\n    }\n    const XO = [\"cross\", \"circle\"];\n    for (const xo of XO) {\n      for (const i of possibleMoves) {\n        let copy = [...itemArray];\n        copy[i] = xo;\n        if (checkIsWinnerCopy(copy)) {\n          move = i;\n          return move;\n        }\n      }\n    }\n\n    let cornersOpen = [];\n    let corners = [1, 3, 7, 9];\n    for (const i of possibleMoves) {\n      if (corners.includes(i)) {\n        cornersOpen.push(i)\n      }\n    }\n\n    if (cornersOpen.length > 0) {\n      move = cornersOpen[Math.floor(Math.random() * cornersOpen.length)];\n      return move;\n    }\n\n    if (possibleMoves.includes(5)) {\n      move = 5;\n      return move;\n    }\n\n    let edgesOpen = [];\n    let edges = [2,4,6,8];\n    for (const i of possibleMoves) {\n      if (edges.includes(i)) {\n        edgesOpen.push(i);\n      }\n    }\n\n    if (edgesOpen.length > 0) {\n      move = edgesOpen[Math.floor(Math.random() * edgesOpen.length)];\n      return move;\n    }\n\n  }\n\n\n  return (\n    <Container className='p-5'>\n      <ToastContainer position='bottom-center' />\n      <Row>\n        <Col md={6} className=\"offset-md-3\">\n          {winMsg ? (\n            <div className=\"mb-2 mt-2\">\n              <h1 className=\"text-primary text-uppercase text-center\">\n                {winMsg}\n              </h1>\n              <Button\n                color=\"success\"\n                block\n                onClick={reloadGame}\n              >\n                Reload Game\n              </Button>\n            </div>\n          ) : (\n            <h1 className='text-center text-warning '>\n                {/* {isCross ? \"Cross\": \"Circle\"} turn */}\n                O : Player......X : Computer\n            </h1>\n          )}\n          <div className=\"grid\">\n            {itemArray.map((item, index) => (\n              <Card color=\"warning\" onClick={() => { change(index) }}>\n                <CardBody className=\"box\">\n                  <Icon name={item} />\n                </CardBody>\n              </Card>\n            ))}\n          </div>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}